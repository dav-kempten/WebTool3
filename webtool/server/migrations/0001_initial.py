# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-10-03 19:51
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import server.models.defaults
import server.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anniversary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text=None, max_length=125, verbose_name='Name')),
                ('public_holiday', models.BooleanField(default=False, verbose_name='Arbeitsfrei')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('fixed_date', models.CharField(blank=True, help_text='Ein festes Datum im Format: TT.MM.', max_length=6, null=True, verbose_name='Konstante')),
                ('day_occurrence', models.SmallIntegerField(blank=True, choices=[(1, 'Erster'), (2, 'Zweiter'), (3, 'Dritter'), (4, 'Vierter'), (5, 'Fünfter'), (-1, 'Letzter'), (-2, 'Vorletzter'), (-3, 'Drittletzter'), (-4, 'Viertletzter'), (-5, 'Fünftletzter')], help_text='Ein bewegliches Datum, ein bestimmter (erste, zweite, ...) Wochentag im Monat', null=True, verbose_name='Zähloffset')),
                ('weekday', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Montag'), (1, 'Dienstag'), (2, 'Mittwoch'), (3, 'Donnerstag'), (4, 'Freitag'), (5, 'Samstag'), (6, 'Sonntag')], null=True, verbose_name='Wochentag')),
                ('month', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Januar'), (2, 'Februar'), (3, 'März'), (4, 'April'), (5, 'Mai'), (6, 'Juni'), (7, 'Juli'), (8, 'August'), (9, 'September'), (10, 'Oktober'), (11, 'November'), (12, 'Dezember')], null=True, verbose_name='Monat')),
                ('easter_offset', models.SmallIntegerField(blank=True, null=True, verbose_name='Osteroffset')),
                ('advent_offset', models.SmallIntegerField(blank=True, null=True, verbose_name='Adventoffset')),
            ],
            options={
                'verbose_name': 'Gedenktag',
                'verbose_name_plural': 'Gedenktage',
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Approximate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.TitleField(db_index=True, help_text='Ungefährer Zeitpunkt', max_length=30, verbose_name='Kurzbeschreibung')),
                ('description', server.models.fields.DescriptionField(help_text='Beschreibung des Zeitraums', verbose_name='Beschreibung')),
                ('start_time', models.TimeField(help_text='Für die Kalkulation benötigte zeitliche Grundlage', verbose_name='Abreisezeit (ungefähr)')),
                ('default', models.BooleanField(default=False, verbose_name='Der initiale Zeitraum')),
            ],
            options={
                'verbose_name': 'Ungefährer Zeitpunkt',
                'verbose_name_plural': 'Ungefähre Zeitpunkte',
                'ordering': ('season__name', 'start_time'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('code', models.CharField(db_index=True, help_text='Kurzzeichen der Kategorie', max_length=3, verbose_name='Kurzzeichen')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung der Kategorie', max_length=125, verbose_name='Bezeichnung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('tour', models.BooleanField(db_index=True, default=False, help_text='Kategorie für Touren', verbose_name='Touren')),
                ('talk', models.BooleanField(db_index=True, default=False, help_text='Kategorie für Vorträge', verbose_name='Vorträge')),
                ('topic', models.BooleanField(db_index=True, default=False, help_text='Kategorie für Kurse', verbose_name='Kurse')),
                ('collective', models.BooleanField(db_index=True, default=False, help_text='Kategorie für Gruppentermine', verbose_name='Gruppentermine')),
                ('winter', models.BooleanField(db_index=True, default=False, verbose_name='Wintersportart')),
                ('summer', models.BooleanField(db_index=True, default=False, verbose_name='Sommersportart')),
                ('climbing', models.BooleanField(default=False, verbose_name='Klettersportart')),
            ],
            options={
                'verbose_name': 'Kategorie',
                'verbose_name_plural': 'Kategorien',
                'ordering': ('season__name', 'order', 'code', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung des Kapitels', max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung des Kapitels', verbose_name='Beschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
            ],
            options={
                'verbose_name': 'Kapitel',
                'verbose_name_plural': 'Kapitel',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Collective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('title', server.models.fields.TitleField(db_index=True, help_text='Das ist der Titel im Kalender', max_length=30, verbose_name='Kurztitel')),
                ('name', server.models.fields.NameField(db_index=True, help_text="Das ist der Titel für's Programm", max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung der Veranstaltung und der geplanten Abläufe\nSonderzeichen: ● ○ ➘ ➚ „“ ½ ⅓ ⅔ ¼ ¾', verbose_name='Beschreibung')),
                ('cover', models.FileField(blank=True, default='', help_text='Eine URL zu einem Bild welches die Veranstaltung charakterisiert', upload_to='', verbose_name='Titelbild')),
                ('internal', models.BooleanField(default=False, verbose_name='Interne Veranstaltung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('categories', models.ManyToManyField(db_index=True, related_name='collective_list', to='server.Category', verbose_name='Kategorie')),
            ],
            options={
                'verbose_name': 'Gruppe',
                'verbose_name_plural': 'Gruppen',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('code', models.CharField(db_index=True, help_text='Kurzzeichen für die Ausrüstung', max_length=10, verbose_name='Kurzzeichen')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung der Ausrüstung', max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(help_text='Beschreibung der Ausrüstung', verbose_name='Beschreibung')),
                ('default', models.BooleanField(default=False, verbose_name='Die initiale Ausrüstung')),
            ],
            options={
                'verbose_name': 'Ausrüstung',
                'verbose_name_plural': 'Ausrüstungen',
                'ordering': ('season__name', 'code'),
            },
        ),
        migrations.CreateModel(
            name='Fitness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('code', models.CharField(db_index=True, help_text='Konditionelle Anforderungen', max_length=3, verbose_name='Kurzbeschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('default', models.BooleanField(default=False, verbose_name='Die initiale konditionelle Anforderung')),
            ],
            options={
                'verbose_name': 'Konditionelle Anforderung',
                'verbose_name_plural': 'Konditionelle Anforderungen',
                'ordering': ('season__name', 'order', 'code'),
            },
        ),
        migrations.CreateModel(
            name='FitnessDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('description', models.TextField(help_text='Beschreibung der Konditionelle Anforderung', verbose_name='Beschreibung')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fitness_list', to='server.Category', verbose_name='Kategorie')),
                ('fitness', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='description_list', to='server.Fitness', verbose_name='Konditionelle Anforderung')),
            ],
            options={
                'verbose_name': 'Beschreibung der Konditionelle Anforderung',
                'verbose_name_plural': 'Beschreibungen der Konditionelle Anforderungen',
                'ordering': ('season__name', 'fitness__code', 'category__order'),
            },
        ),
        migrations.CreateModel(
            name='Guide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('first_name', models.CharField(blank=True, default='Unbekannt', max_length=30, verbose_name='Vorname')),
                ('last_name', models.CharField(blank=True, default='', max_length=30, verbose_name='Nachname')),
                ('unknown', models.BooleanField(default=False, help_text='Der unbekannte Guide', verbose_name='Unbekannt')),
                ('profile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Steckbrief')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='eMail')),
                ('phone', models.CharField(blank=True, default='', help_text='Die Telefonnummer eines Kurs/Touren/Gruppenleiters für Rückfragen', max_length=75, verbose_name='Festnetz')),
                ('mobile', models.CharField(blank=True, default='', help_text='Die Handynummer eines Kurs/Touren/Gruppenleiters für Rückfragen', max_length=75, verbose_name='Handy')),
                ('portrait', models.FileField(blank=True, default='', help_text='Die URL zu einer Datei mit dem Portrait eines Kurs/Touren/Gruppenleiters', upload_to='', verbose_name='Portrait')),
            ],
            options={
                'verbose_name': 'Touren/Kurs/Gruppenleiter',
                'verbose_name_plural': 'Touren/Kurs/Gruppenleiter',
                'ordering': ('season__name', 'last_name', 'first_name'),
            },
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung des Abschnitts', max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung des Abschnitts', verbose_name='Beschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
            ],
            options={
                'verbose_name': 'Abschnitt',
                'verbose_name_plural': 'Abschnitte',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('member_id', models.CharField(help_text='Format:sss-oo-mmmmmm s=Sektionsnummer(008) o=Ortsgruppe(00|01) m=Mitgliedsnummer', max_length=13, unique=True, validators=[django.core.validators.RegexValidator(re.compile('\\d{3}-\\d{2}-\\d{6}', 32), 'Bitte auf den richtigen Aufbau achten')], verbose_name='MitgliedsNr')),
                ('sex', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'unbekannt'), (1, 'männlich'), (2, 'weiblich'), (9, 'nicht anwendbar')], default=0, help_text='Biologisches Geschlecht', verbose_name='Geschlecht')),
                ('phone', models.CharField(blank=True, default='', help_text='Rufnummer für Nachfragen in Sektionsangelegenheiten', max_length=75, verbose_name='Telefon')),
                ('mobile', models.CharField(blank=True, default='', help_text='Rufnummer für die Erreichbarkeit auf Tour', max_length=75, verbose_name='Handy')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Geburtstag')),
                ('note', models.TextField(blank=True, default='', help_text='Raum für interne Notizen', verbose_name='Notizen')),
                ('member_year', models.PositiveIntegerField(blank=True, default=2017, help_text='Jahr der Aufnahme in den AV', null=True, verbose_name='Jahr')),
                ('integral_member', models.BooleanField(default=False, verbose_name='A-Mitglied')),
                ('member_home', models.CharField(blank=True, default='', help_text='Heimatsektion für C-Mitglieder', max_length=70, verbose_name='Heimatsektion')),
            ],
            options={
                'verbose_name': 'Steckbrief',
                'verbose_name_plural': 'Steckbriefe',
                'ordering': ('user__last_name', 'user__first_name'),
            },
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('code', models.CharField(help_text='Kurzzeichen der Qualifikation', max_length=10, primary_key=True, serialize=False, verbose_name='Kurzzeichen')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung der Qualifikation', max_length=125, verbose_name='Bezeichnung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
            ],
            options={
                'verbose_name': 'Qualifikation',
                'verbose_name_plural': 'Qualifikationen',
                'ordering': ('order', 'code', 'name'),
            },
        ),
        migrations.CreateModel(
            name='QualificationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung der Qualifikationsgruppe', max_length=125, unique=True, verbose_name='Bezeichnung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
            ],
            options={
                'verbose_name': 'Qualifikationsgruppe',
                'verbose_name_plural': 'Qualifikationsgruppen',
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('reference', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(99, 'Bitte keine Zahlen größer 99 eingeben')], verbose_name='Buchungscode')),
            ],
            options={
                'verbose_name': 'Buchungscode',
                'verbose_name_plural': 'Buchungscodes',
                'ordering': ('season__name', 'category__order', 'reference'),
            },
        ),
        migrations.CreateModel(
            name='Retraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('year', models.PositiveIntegerField(db_index=True, default=server.models.defaults.get_default_year, help_text='Das Jahr, in dem die Fortbildung besucht wurde', verbose_name='Jahr')),
                ('specific', models.BooleanField(default=False, help_text='Es handelt sich um eine fachspezifische Fortbildung', verbose_name='Fachspezifisch')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('description', models.TextField(help_text='Kurze Beschreibung der Fortbildung', verbose_name='Beschreibung')),
                ('note', models.TextField(blank=True, help_text='Raum für interne Notizen', null=True, verbose_name='Notizen')),
            ],
            options={
                'verbose_name': 'Fortbildung',
                'verbose_name_plural': 'Fortbildungen',
                'ordering': ['year', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', models.SlugField(help_text='Jahreszahl als Bezeichnung z.B. 2017', max_length=4, unique=True, verbose_name='Bezeichnung')),
                ('current', models.BooleanField(default=False, verbose_name='Die aktuelle Saison')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=server.models.defaults.get_default_params, null=True)),
            ],
            options={
                'verbose_name': 'Saison',
                'verbose_name_plural': 'Saisonen',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung des Unterabschnitts', max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung des Unterabschnitts', verbose_name='Beschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='section_list', to='server.Part', verbose_name='Abschnitt')),
            ],
            options={
                'verbose_name': 'Unterabschnitt',
                'verbose_name_plural': 'Unterabschnitte',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('code', models.CharField(help_text='Technische Anforderungen', max_length=3, verbose_name='Kurzbeschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('default', models.BooleanField(default=False, verbose_name='Die initialen technische Anforderungen')),
            ],
            options={
                'verbose_name': 'Technische Anforderung',
                'verbose_name_plural': 'Technische Anforderungen',
                'ordering': ('season__name', 'order', 'code'),
            },
        ),
        migrations.CreateModel(
            name='SkillDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('description', models.TextField(help_text='Beschreibung der technischen Anforderungen', verbose_name='Beschreibung')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='skill_list', to='server.Category', verbose_name='Kategorie')),
            ],
            options={
                'verbose_name': 'Beschreibung der technischen Anforderung',
                'verbose_name_plural': 'Beschreibung der technischen Anforderungen',
                'ordering': ('season__name', 'skill__code', 'category__order'),
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.TitleField(help_text='Bearbeitungsstand', max_length=30, verbose_name='Kurzbeschreibung')),
                ('description', server.models.fields.DescriptionField(help_text='Beschreibung des Bearbeitungsstandes', verbose_name='Beschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('public', models.BooleanField(default=False, verbose_name='Alle öffentlichen sichtbaren Bearbeitungsstände')),
                ('default', models.BooleanField(default=False, verbose_name='Der Bearbeitungsstand: "In Arbeit"')),
                ('canceled', models.BooleanField(default=False, verbose_name='Der Bearbeitungsstand: "Ausgefallen"')),
                ('moved', models.BooleanField(default=False, verbose_name='Der Bearbeitungsstand: "Verschoben"')),
                ('unfeasible', models.BooleanField(default=False, verbose_name='Der Bearbeitungsstand: "Noch nicht buchbar"')),
                ('done', models.BooleanField(default=False, verbose_name='Der Bearbeitungsstand: "Durchgeführt"')),
            ],
            options={
                'verbose_name': 'Bearbeitungsstand',
                'verbose_name_plural': 'Bearbeitungsstände',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text='Bezeichnung der Preisgruppe', max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung des Preisgruppe', verbose_name='Beschreibung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('multiplier', models.DecimalField(blank=True, decimal_places=3, default=0.0, help_text='Preisaufschlag auf Mitgliederpreise', max_digits=6, verbose_name='Preisaufschlag')),
            ],
            options={
                'verbose_name': 'Preisgruppe',
                'verbose_name_plural': 'Preisgruppen',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('title', server.models.fields.TitleField(db_index=True, help_text='Das ist der Titel im Kalender', max_length=30, verbose_name='Kurztitel')),
                ('name', server.models.fields.NameField(db_index=True, help_text="Das ist der Titel für's Programm", max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung der Veranstaltung und der geplanten Abläufe\nSonderzeichen: ● ○ ➘ ➚ „“ ½ ⅓ ⅔ ¼ ¾', verbose_name='Beschreibung')),
                ('cover', models.FileField(blank=True, default='', help_text='Eine URL zu einem Bild welches die Veranstaltung charakterisiert', upload_to='', verbose_name='Titelbild')),
                ('internal', models.BooleanField(default=False, verbose_name='Interne Veranstaltung')),
                ('misc_equipment', server.models.fields.MiscField(blank=True, default='', help_text='Zusätzliche Ausrüstung, wenn unter Ausrüstung „Sonstiges“ gewählt wurde', max_length=75, verbose_name='Sonstiges')),
                ('preconditions', models.TextField(blank=True, default='', help_text='Sonstige, spezielle Vorraussetzungen für eine Teilnahme an diesem Kurs', verbose_name='Voraussetzung')),
                ('order', server.models.fields.OrderField(blank=True, db_index=True, default=0, help_text='Reihenfolge in der Druckausgabe', verbose_name='Reihenfolge')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='topic_list', to='server.Category', verbose_name='Kategorie')),
                ('equipments', models.ManyToManyField(blank=True, db_index=True, default=server.models.defaults.get_default_equipment_list, related_name='topic_list', to='server.Equipment', verbose_name='Ausrüstung')),
                ('qualifications', models.ManyToManyField(blank=True, db_index=True, help_text='Welche Kurseinhalte müssen von den Teilnahmern für den Kurs beherrscht werden', related_name='topic_list', to='server.Topic', verbose_name='Voraussetzungen (Kurse)')),
            ],
            options={
                'verbose_name': 'Kursinhalt',
                'verbose_name_plural': 'Kursinhalte',
                'ordering': ('season__name', 'order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='UserQualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('aspirant', models.BooleanField(default=False, help_text='Die Qualifikation wurde noch nicht erworben', verbose_name='Anwärter')),
                ('year', models.PositiveSmallIntegerField(default=server.models.defaults.get_default_year, help_text='Das Jahr, in dem die Ausbildung abgeschlossen wurde', verbose_name='Jahr')),
                ('inactive', models.BooleanField(default=False, verbose_name='Keine Fortbildung notwendig')),
                ('note', models.TextField(blank=True, default='', help_text='Raum für interne Notizen', verbose_name='Notizen')),
                ('qualification', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_list', to='server.Qualification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='qualification_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('year', 'qualification__order'),
            },
        ),
        migrations.CreateModel(
            name='Vacation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('name', server.models.fields.NameField(help_text=None, max_length=125, verbose_name='Name')),
                ('start_date', models.DateField(verbose_name='Beginn')),
                ('end_date', models.DateField(verbose_name='Ende')),
            ],
            options={
                'verbose_name': 'Ferien',
                'verbose_name_plural': 'Ferien',
                'ordering': ('start_date', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('season', models.OneToOneField(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='calendar', serialize=False, to='server.Season', verbose_name='Saison')),
            ],
            options={
                'verbose_name': 'Kalender',
                'verbose_name_plural': 'Kalender',
                'ordering': ('season__name',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('title', server.models.fields.TitleField(db_index=True, help_text='Das ist der Titel im Kalender', max_length=30, verbose_name='Kurztitel')),
                ('name', server.models.fields.NameField(db_index=True, help_text="Das ist der Titel für's Programm", max_length=125, verbose_name='Bezeichnung')),
                ('description', server.models.fields.DescriptionField(blank=True, default='', help_text='Beschreibung der Veranstaltung und der geplanten Abläufe\nSonderzeichen: ● ○ ➘ ➚ „“ ½ ⅓ ⅔ ¼ ¾', verbose_name='Beschreibung')),
                ('cover', models.FileField(blank=True, default='', help_text='Eine URL zu einem Bild welches die Veranstaltung charakterisiert', upload_to='', verbose_name='Titelbild')),
                ('internal', models.BooleanField(default=False, verbose_name='Interne Veranstaltung')),
                ('reference', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='event_list', serialize=False, to='server.Reference', verbose_name='Buchungscode')),
                ('location', server.models.fields.LocationField(blank=True, default='', max_length=75)),
                ('start_date', models.DateField(db_index=True, verbose_name='Abreisetag')),
                ('start_time', models.TimeField(blank=True, help_text='Je nach Abreisezeit wird eventuell Urlaub benötgit', null=True, verbose_name='Abreisezeit (Genau)')),
                ('end_date', models.DateField(blank=True, help_text='Nur wenn die Veranstaltung mehr als einen Tag dauert', null=True, verbose_name='Rückkehr')),
                ('end_time', models.TimeField(blank=True, help_text='z.B. Ungefähr bei Touren/Kursen - Genau bei Vorträgen', null=True, verbose_name='Rückkehrzeit')),
                ('link', models.URLField(blank=True, default='', help_text='Eine URL zur Veranstaltungsbeschreibung auf der Homepage', verbose_name='Beschreibung')),
                ('map', models.FileField(blank=True, default='', help_text='Eine URL zu einem Kartenausschnitt des Veranstaltungsgebietes', upload_to='', verbose_name='Kartenausschnitt')),
                ('distal', models.BooleanField(db_index=True, default=False, verbose_name='Mit gemeinsamer Anreise')),
                ('rendezvous', server.models.fields.LocationField(blank=True, default='', help_text='Treffpunkt für die Abfahrt z.B. Edelweissparkplatz', max_length=75, verbose_name='Treffpunkt')),
                ('source', server.models.fields.LocationField(blank=True, default='', help_text='Treffpunkt vor Ort', max_length=75, verbose_name='Ausgangsort')),
                ('public_transport', models.BooleanField(db_index=True, default=False, verbose_name='Öffentliche Verkehrsmittel')),
                ('distance', server.models.fields.DistanceField(blank=True, default=0, help_text='Kempten (Treffpunkt) → Ausgangsort', verbose_name='Entfernung')),
                ('lea', models.BooleanField(db_index=True, default=False, verbose_name='Low Emission Adventure')),
            ],
            options={
                'verbose_name': 'Veranstaltungstermin',
                'verbose_name_plural': 'Veranstaltungstermine',
                'ordering': ('start_date',),
            },
        ),
        migrations.AddField(
            model_name='topic',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='topic_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='topic',
            name='tariffs',
            field=models.ManyToManyField(db_index=True, related_name='instruction_list', to='server.Tariff', verbose_name='Preisaufschläge'),
        ),
        migrations.AddField(
            model_name='tariff',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='tariff_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='state',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='state_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='skilldescription',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='skilldescription_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='skilldescription',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='description_list', to='server.Skill', verbose_name='Technische Anforderung'),
        ),
        migrations.AddField(
            model_name='skill',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='skill_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='section',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='section_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='retraining',
            name='qualification',
            field=models.ForeignKey(blank=True, help_text='Für fachspezifische Fortbildungen, die dazugehörige Qualifikation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='retraining_list', to='server.UserQualification', verbose_name='Qualifikation'),
        ),
        migrations.AddField(
            model_name='retraining',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='retraining_list', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reference',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='event_list', to='server.Category', verbose_name='Kategorie'),
        ),
        migrations.AddField(
            model_name='reference',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='reference_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='qualification',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='qualifications', to='server.QualificationGroup'),
        ),
        migrations.AddField(
            model_name='part',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='part_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='guide',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='guide_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='guide',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='guide_list', to=settings.AUTH_USER_MODEL, verbose_name='Leiter'),
        ),
        migrations.AddField(
            model_name='fitnessdescription',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='fitnessdescription_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='fitness',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='fitness_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='equipment_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='collective',
            name='managers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Ansprechpartner für die Gruppe', related_name='collectives', to='server.Guide', verbose_name='Manager'),
        ),
        migrations.AddField(
            model_name='collective',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='collective_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='collective',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='collective_list', to='server.Section', verbose_name='Unterabschnitt'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='chapter_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='chapter_list', to='server.Section', verbose_name='Unterabschnitt'),
        ),
        migrations.AddField(
            model_name='category',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='category_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='approximate',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='approximate_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('calc_budget', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Geplanter Betrag in €, der vom Team in Summe abgerechnet wird', max_digits=6, verbose_name='Budget')),
                ('real_costs', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Tatsächlicher Betrag in €, der vom Team in Summe abgerechnet wurde', max_digits=6, verbose_name='Abrechnung')),
                ('budget_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('message', models.TextField(blank=True, default='')),
                ('comment', models.TextField(blank=True, default='')),
                ('admission', server.models.fields.AdmissionField(blank=True, decimal_places=2, default=0.0, help_text='Teilnehmerbeitrag in €', max_digits=6, verbose_name='Beitrag für Mitglieder')),
                ('advances', server.models.fields.AdmissionField(blank=True, decimal_places=2, default=0.0, help_text='Im Beitrag enthaltene Vorauszahlungen oder Stornogebühren in €', max_digits=6, verbose_name='Vorauszahlung')),
                ('advances_info', server.models.fields.InfoField(blank=True, default='', help_text='Begründung für die Vorrauszahlung', max_length=75, verbose_name='Info')),
                ('extra_charges', models.CharField(blank=True, default='', help_text='Welche weiteren Kosten kommen auf die Teilnehmer zu? z.B. Kosten für Seilbahn', max_length=75, verbose_name='Zusatzkosten')),
                ('min_quantity', models.PositiveIntegerField(blank=True, default=0, help_text='Wieviel Teilnehemr müssen mindestens teilnehmen', verbose_name='Min. Tln')),
                ('max_quantity', models.PositiveIntegerField(help_text='Wieviel Teilnehemr dürfen mit', verbose_name='Max. Tln')),
                ('cur_quantity', models.PositiveIntegerField(blank=True, default=0, help_text='Wieviel Teilnehemr sind aktuell dabei', verbose_name='Anmeldungen')),
                ('instruction', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='meeting', serialize=False, to='server.Event', verbose_name='Veranstaltung')),
                ('ladies_only', models.BooleanField(default=False, verbose_name='Von Frauen für Frauen')),
            ],
            options={
                'verbose_name': 'Kurs',
                'verbose_name_plural': 'Kurse',
                'ordering': ('instruction__start_date', 'topic__order'),
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('misc_equipment', server.models.fields.MiscField(blank=True, default='', help_text='Zusätzliche Ausrüstung, wenn unter Ausrüstung „Sonstiges“ gewählt wurde', max_length=75, verbose_name='Sonstiges')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='session', serialize=False, to='server.Event', verbose_name='Veranstaltung')),
                ('speaker', models.CharField(blank=True, default='', help_text='Name des Referenten', max_length=125, verbose_name='Referent')),
                ('portal', models.URLField(blank=True, default='', help_text='Eine URL zum Tourenportal der Alpenvereine', verbose_name='Tourenportal')),
            ],
            options={
                'verbose_name': 'Gruppentermin',
                'verbose_name_plural': 'Gruppentermine',
                'ordering': ('collective__season__name', 'collective__name', 'session__start_date'),
            },
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('talk', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='talk', serialize=False, to='server.Event', verbose_name='Vortrag')),
                ('speaker', models.CharField(blank=True, default='', help_text='Name des Referenten', max_length=125, verbose_name='Referent')),
                ('admission', server.models.fields.AdmissionField(blank=True, decimal_places=2, default=0.0, help_text='Teilnehmerbeitrag in €', max_digits=6, verbose_name='Beitrag für Mitglieder')),
            ],
            options={
                'verbose_name': 'Vortrag',
                'verbose_name_plural': 'Vortäge',
                'ordering': ('talk__start_date',),
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('updated', models.DateTimeField(auto_now=True)),
                ('deprecated', models.BooleanField(default=False, verbose_name='Element gilt als gelöscht')),
                ('calc_budget', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Geplanter Betrag in €, der vom Team in Summe abgerechnet wird', max_digits=6, verbose_name='Budget')),
                ('real_costs', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Tatsächlicher Betrag in €, der vom Team in Summe abgerechnet wurde', max_digits=6, verbose_name='Abrechnung')),
                ('budget_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('message', models.TextField(blank=True, default='')),
                ('comment', models.TextField(blank=True, default='')),
                ('misc_equipment', server.models.fields.MiscField(blank=True, default='', help_text='Zusätzliche Ausrüstung, wenn unter Ausrüstung „Sonstiges“ gewählt wurde', max_length=75, verbose_name='Sonstiges')),
                ('admission', server.models.fields.AdmissionField(blank=True, decimal_places=2, default=0.0, help_text='Teilnehmerbeitrag in €', max_digits=6, verbose_name='Beitrag für Mitglieder')),
                ('advances', server.models.fields.AdmissionField(blank=True, decimal_places=2, default=0.0, help_text='Im Beitrag enthaltene Vorauszahlungen oder Stornogebühren in €', max_digits=6, verbose_name='Vorauszahlung')),
                ('advances_info', server.models.fields.InfoField(blank=True, default='', help_text='Begründung für die Vorrauszahlung', max_length=75, verbose_name='Info')),
                ('extra_charges', models.CharField(blank=True, default='', help_text='Welche weiteren Kosten kommen auf die Teilnehmer zu? z.B. Kosten für Seilbahn', max_length=75, verbose_name='Zusatzkosten')),
                ('min_quantity', models.PositiveIntegerField(blank=True, default=0, help_text='Wieviel Teilnehemr müssen mindestens teilnehmen', verbose_name='Min. Tln')),
                ('max_quantity', models.PositiveIntegerField(help_text='Wieviel Teilnehemr dürfen mit', verbose_name='Max. Tln')),
                ('cur_quantity', models.PositiveIntegerField(blank=True, default=0, help_text='Wieviel Teilnehemr sind aktuell dabei', verbose_name='Anmeldungen')),
                ('preconditions', models.TextField(blank=True, default='', help_text='Sonstige, spezielle Vorraussetzungen für eine Teilnahme an diesem Kurs', verbose_name='Voraussetzung')),
                ('misc_category', models.CharField(blank=True, default='', help_text='Kategoriebezeichnung, wenn unter Kategorie „Sonstiges“ gewählt wurde', max_length=75, verbose_name='Sonstiges')),
                ('ladies_only', models.BooleanField(default=False, verbose_name='Von Frauen für Frauen')),
                ('info', server.models.fields.InfoField(blank=True, default='', help_text='Informationen, wenn z.B. keine Tourenbesprechung geplant ist.', max_length=75, verbose_name='Info')),
                ('tour', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='tour', serialize=False, to='server.Event', verbose_name='Veranstaltung')),
                ('portal', models.URLField(blank=True, default='', help_text='Eine URL zum Tourenportal der Alpenvereine', verbose_name='Tourenportal')),
            ],
            options={
                'verbose_name': 'Gemeinschaftstour',
                'verbose_name_plural': 'Gemeinschaftstouren',
                'ordering': ('tour__start_date',),
            },
        ),
        migrations.AddField(
            model_name='vacation',
            name='calendar',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_calendar, on_delete=django.db.models.deletion.PROTECT, related_name='vacation_list', to='server.Calendar', verbose_name='Kalender'),
        ),
        migrations.AlterUniqueTogether(
            name='userqualification',
            unique_together=set([('user', 'qualification', 'year')]),
        ),
        migrations.AlterUniqueTogether(
            name='tariff',
            unique_together=set([('season', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='state',
            unique_together=set([('season', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='skilldescription',
            unique_together=set([('season', 'skill', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='skill',
            unique_together=set([('season', 'code')]),
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together=set([('season', 'part', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='reference',
            unique_together=set([('season', 'category', 'reference')]),
        ),
        migrations.AlterUniqueTogether(
            name='qualification',
            unique_together=set([('code', 'name'), ('code', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='part',
            unique_together=set([('season', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='guide',
            unique_together=set([('season', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='fitnessdescription',
            unique_together=set([('season', 'fitness', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='fitness',
            unique_together=set([('season', 'code')]),
        ),
        migrations.AddField(
            model_name='event',
            name='approximate',
            field=models.ForeignKey(blank=True, help_text='Je nach Abreisezeit wird eventuell Urlaub benötigt', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='event_list', to='server.Approximate', verbose_name='Abreisezeit (Ungefähr)'),
        ),
        migrations.AddField(
            model_name='event',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='event_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AlterUniqueTogether(
            name='equipment',
            unique_together=set([('season', 'code'), ('season', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='collective',
            unique_together=set([('season', 'title'), ('season', 'title', 'name'), ('season', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together=set([('season', 'section', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together=set([('season', 'code'), ('season', 'code', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='approximate',
            unique_together=set([('season', 'name')]),
        ),
        migrations.AddField(
            model_name='anniversary',
            name='calendar',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_calendar, on_delete=django.db.models.deletion.PROTECT, related_name='anniversary_list', to='server.Calendar', verbose_name='Kalender'),
        ),
        migrations.AlterUniqueTogether(
            name='vacation',
            unique_together=set([('calendar', 'name')]),
        ),
        migrations.AddField(
            model_name='tour',
            name='categories',
            field=models.ManyToManyField(blank=True, db_index=True, related_name='_tour_categories_+', to='server.Category', verbose_name='Weitere Kategorien'),
        ),
        migrations.AddField(
            model_name='tour',
            name='chapter',
            field=models.ManyToManyField(db_index=True, related_name='tour_list', to='server.Chapter', verbose_name='Kapitel'),
        ),
        migrations.AddField(
            model_name='tour',
            name='deadline',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='deadline', to='server.Event', verbose_name='Anmeldeschluss'),
        ),
        migrations.AddField(
            model_name='tour',
            name='equipments',
            field=models.ManyToManyField(blank=True, db_index=True, default=server.models.defaults.get_default_equipment_list, related_name='tour_list', to='server.Equipment', verbose_name='Ausrüstung'),
        ),
        migrations.AddField(
            model_name='tour',
            name='fitness',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_fitness, help_text='Konditionelle Anforderungen', on_delete=django.db.models.deletion.PROTECT, related_name='tour_list', to='server.Fitness', verbose_name='Kondition'),
        ),
        migrations.AddField(
            model_name='tour',
            name='guide',
            field=models.ForeignKey(help_text='Verantwortlich für Organisaton und Durchführung', on_delete=django.db.models.deletion.PROTECT, related_name='tour_guides', to='server.Guide', verbose_name='Leitung'),
        ),
        migrations.AddField(
            model_name='tour',
            name='preliminary',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preliminary', to='server.Event', verbose_name='Tourenbesprechung'),
        ),
        migrations.AddField(
            model_name='tour',
            name='qualifications',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Welche Kurseinhalte müssen von den Teilnahmern für den Kurs beherrscht werden', related_name='tour_list', to='server.Topic', verbose_name='Voraussetzungen (Kurse)'),
        ),
        migrations.AddField(
            model_name='tour',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='tour_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='tour',
            name='skill',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_skill, help_text='Technische Anforderungen', on_delete=django.db.models.deletion.PROTECT, related_name='tour_list', to='server.Skill', verbose_name='Technik'),
        ),
        migrations.AddField(
            model_name='tour',
            name='state',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_state, on_delete=django.db.models.deletion.PROTECT, related_name='tour_list', to='server.State', verbose_name='Bearbeitungsstand'),
        ),
        migrations.AddField(
            model_name='tour',
            name='team',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Mitglieder im Leitungsteam', related_name='tour_teamers', to='server.Guide', verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='talk',
            name='chapter',
            field=models.ManyToManyField(db_index=True, related_name='talk_list', to='server.Chapter', verbose_name='Kapitel'),
        ),
        migrations.AddField(
            model_name='talk',
            name='season',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_season, on_delete=django.db.models.deletion.PROTECT, related_name='talk_list', to='server.Season', verbose_name='Saison'),
        ),
        migrations.AddField(
            model_name='talk',
            name='state',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_state, on_delete=django.db.models.deletion.PROTECT, related_name='talk_list', to='server.State', verbose_name='Bearbeitungsstand'),
        ),
        migrations.AddField(
            model_name='talk',
            name='tariffs',
            field=models.ManyToManyField(db_index=True, related_name='talk_list', to='server.Tariff', verbose_name='Preisaufschläge'),
        ),
        migrations.AddField(
            model_name='session',
            name='chapter',
            field=models.ManyToManyField(db_index=True, related_name='session_list', to='server.Chapter', verbose_name='Kapitel'),
        ),
        migrations.AddField(
            model_name='session',
            name='collective',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='session_list', to='server.Collective', verbose_name='Gruppe'),
        ),
        migrations.AddField(
            model_name='session',
            name='equipments',
            field=models.ManyToManyField(blank=True, db_index=True, default=server.models.defaults.get_default_equipment_list, related_name='session_list', to='server.Equipment', verbose_name='Ausrüstung'),
        ),
        migrations.AddField(
            model_name='session',
            name='fitness',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_fitness, help_text='Konditionelle Anforderungen', on_delete=django.db.models.deletion.PROTECT, related_name='session_list', to='server.Fitness', verbose_name='Kondition'),
        ),
        migrations.AddField(
            model_name='session',
            name='guide',
            field=models.ForeignKey(help_text='Verantwortlich für Organisaton und Durchführung', on_delete=django.db.models.deletion.PROTECT, related_name='session_guides', to='server.Guide', verbose_name='Leitung'),
        ),
        migrations.AddField(
            model_name='session',
            name='skill',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_skill, help_text='Technische Anforderungen', on_delete=django.db.models.deletion.PROTECT, related_name='session_list', to='server.Skill', verbose_name='Technik'),
        ),
        migrations.AddField(
            model_name='session',
            name='state',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_state, on_delete=django.db.models.deletion.PROTECT, related_name='session_list', to='server.State', verbose_name='Bearbeitungsstand'),
        ),
        migrations.AddField(
            model_name='session',
            name='team',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Mitglieder im Leitungsteam', related_name='session_teamers', to='server.Guide', verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='chapter',
            field=models.ManyToManyField(db_index=True, related_name='instruction_list', to='server.Chapter', verbose_name='Kapitel'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='guide',
            field=models.ForeignKey(help_text='Verantwortlich für Organisaton und Durchführung', on_delete=django.db.models.deletion.PROTECT, related_name='instruction_guides', to='server.Guide', verbose_name='Leitung'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='state',
            field=models.ForeignKey(blank=True, default=server.models.defaults.get_default_state, on_delete=django.db.models.deletion.PROTECT, related_name='instruction_list', to='server.State', verbose_name='Bearbeitungsstand'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='team',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Mitglieder im Leitungsteam', related_name='instruction_teamers', to='server.Guide', verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instructions', to='server.Topic', verbose_name='Inhalt'),
        ),
        migrations.AddField(
            model_name='event',
            name='instruction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting_list', to='server.Instruction', verbose_name='Kurs'),
        ),
        migrations.AlterUniqueTogether(
            name='anniversary',
            unique_together=set([('calendar', 'name')]),
        ),
    ]
